<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	 <mvc:annotation-driven />
	 

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	 <mvc:resources mapping="/resources/**" location="/resources/" />
	 <!-- ==== #6. 이미지, 동영상, js, css 파일등이 위치하는 경로를 의미한다. 
	 			그 경로는 /webapp/resources 아래에 위치하거나 
	 			또는 /webapp/resources 아래에 폴더를 만들어서 저장시켜야 한다.  ==== -->

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="2" />  <!-- tiles3 설정 -->
	</beans:bean>
	<!-- ==== #6. return "view단페이지명"; 
		예. return "member"; 는 
			자동적으로 
			return "/WEB-INF/views/member.jsp"; 로 인식한다.
	==== -->
	
	<!-- ==== #6. 컨트롤러(*.java)가 위치하는 패키지명 지정하기 ==== -->
	<!-- 
	<context:component-scan base-package="com.test.startspring" /> 
	-->
	<context:component-scan base-package="com.spring.*" />
	<!-- 앞으로 생성할 모든 컨트롤러, 서비스단, Aspect 등 (*.java)파일은 
		항상 com.test.* 패키지 안에서 생성되어져야만 스프링 컨테이너에 의해 스캔되어
		자동적으로 bean 으로 등록되어진다.  --> 
		<!-- com.spring.* 은 모든 컨트롤러(*.java)파일은 항상  com.spring. 으로 시작하는 패키지 안에 있어야 한다. -->
	<!-- ==== Component Scan 은 XML 파일에 일일이 빈등록을 하지 않고 
	                  빈으로 등록되어야 할  클래스명 앞에 @Component 어노테이션을 써주면 해당 클래스는 자동으로 빈등록이 되어지는 것이다.
	                  즉, 패키지 com.spring.* 안에서 생성된 클래스들을 스캔하여 클래스명 앞에 @Component 어노테이션을 적어준것이 있는지 검사하여 
	                  클래스명 앞에 @Component 어노테이션이 있다라면 이 클래스는 자동적으로 bean 으로 등록된다.         
	                  따라서, XML 파일에 일일이 빈등록 작업을 하지 않아도 자동적으로 한꺼번에 bean 등록이 되어진다. 
	          XML 파일은 배치서술자 이므로 톰캣서버가 구동되어질때 한번만 읽어들인다. 
	                  이 XML 파일에 빈을 등록시키면 톰캣서버가 구동될때 bean 으로 등록되어진 클래스는 모두 객체화 되어 
	                  메모리에 올라와 언제든지 작업을 할 준비가 되어지는 것이다. -->
	
	<!-- ===== #22. 일단 스프링에서 트랜잭션 처리를 하기 위해서는 아래와 같이 트랜잭션 처리을 위한 aop 등록을 해야만 한다. ===== -->
	<!--  
		- 아래의 <aop:aspectj-autoproxy />가 AOP 관련 어노테이션 동작이 가능하게 설정해줌.
    -->	
	<!--  AOP 관련 어노테이션 동작이 가능하게 설정 -->	
	<aop:aspectj-autoproxy /> <!-- 추가 -->
	   
	<aop:config proxy-target-class="true">
	  <aop:pointcut id="controllerOperation" expression="execution(public * com.spring..*Controller.*(..))" />
    </aop:config>	
	
	
	<!-- Tiles 뷰 리졸버 -->
	<beans:bean id="viewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView" />
		<beans:property name="order" value="1" />
	</beans:bean>
	
	<!-- Tiles 설정 파일 -->
	<beans:bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<beans:property name="definitions">
			<beans:list>
				<beans:value>/WEB-INF/tiles/tiles.xml</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>
	
	<!-- ===== #25. 파일업로드 및 다운로드에 필요한 의존객체 설정하기 ===== -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">   
	<!-- 자바파일이 UTF-8로 저장된 경우 한글파일명이 깨지지 않게하기 위해 -->
        <beans:property name="defaultEncoding" value="utf-8" />
		<beans:property name="maxUploadSize" value="10485760" />
	</beans:bean>
	
</beans:beans>


